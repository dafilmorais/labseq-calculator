{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let LabSeqComponent = class LabSeqComponent {\n  constructor(labSeqService) {\n    this.labSeqService = labSeqService;\n    this.sequenceNumber = ''; // Start with an empty string\n    this.labSeqValue = '-'; // Start with an empty string\n    this.loading = false;\n    this.error = null;\n    this.historyResults = [];\n    this.labSeqSubscription = null;\n  }\n  isValidInput() {\n    // Use regex to match positive integers\n    const positiveIntegerRegex = /^[0-9]\\d*$/;\n    // Check if the input is a positive integer and less than or equal to 1000\n    const isValid = positiveIntegerRegex.test(this.sequenceNumber) && +this.sequenceNumber <= 1000;\n    if (!isValid) {\n      console.error('Invalid input. Please enter a positive integer less than or equal to 1000.');\n    }\n    return isValid;\n  }\n  getLabSeqValue() {\n    this.loading = true;\n    this.error = null;\n    if (!this.isValidInput()) {\n      return;\n    }\n    if (this.labSeqSubscription) {\n      this.labSeqSubscription.unsubscribe();\n    }\n    // Convert the input to a number if it's not an empty string\n    const inputNumber = this.sequenceNumber !== '' ? +this.sequenceNumber : 0;\n    this.labSeqSubscription = this.labSeqService.getLabSeqValue(inputNumber).subscribe({\n      next: value => {\n        this.labSeqValue = value.toString();\n        this.historyResults.push({\n          input: this.sequenceNumber?.toString() ?? 'N/A',\n          output: this.labSeqValue.toString()\n        });\n        this.sequenceNumber = ''; // Set the input to an empty string\n        this.loading = false;\n      },\n      error: error => {\n        console.error('Error fetching LabSeq value:', error);\n        this.error = 'Error fetching LabSeq value. Please try again.';\n        this.loading = false;\n      }\n    });\n  }\n  openSwaggerUI() {\n    const swaggerUrl = 'http://localhost:8080/q/swagger-ui';\n    window.open(swaggerUrl, '_blank');\n  }\n};\nLabSeqComponent = __decorate([Component({\n  selector: 'app-labseq',\n  templateUrl: './LabSeqComponent.html',\n  styleUrls: ['LabSeqComponent.css']\n})], LabSeqComponent);","map":{"version":3,"names":["Component","LabSeqComponent","constructor","labSeqService","sequenceNumber","labSeqValue","loading","error","historyResults","labSeqSubscription","isValidInput","positiveIntegerRegex","isValid","test","console","getLabSeqValue","unsubscribe","inputNumber","subscribe","next","value","toString","push","input","output","openSwaggerUI","swaggerUrl","window","open","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\danie\\Desktop\\quarkus-rest-service\\frontend\\src\\app\\components\\LabSeqComponent.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { LabSeqService } from '../services/LabSeqService';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-labseq',\r\n  templateUrl: './LabSeqComponent.html',\r\n  styleUrls: ['LabSeqComponent.css'],\r\n})\r\nexport class LabSeqComponent {\r\n  sequenceNumber: string = ''; // Start with an empty string\r\n  labSeqValue: string = '-'; // Start with an empty string\r\n  loading: boolean = false;\r\n  error: string | null = null;\r\n  historyResults: { input: string; output: string }[] = [];\r\n  private labSeqSubscription: Subscription | null = null;\r\n\r\n  constructor(private labSeqService: LabSeqService) {}\r\n\r\n  isValidInput(): boolean {\r\n    // Use regex to match positive integers\r\n    const positiveIntegerRegex = /^[0-9]\\d*$/;\r\n  \r\n    // Check if the input is a positive integer and less than or equal to 1000\r\n    const isValid = positiveIntegerRegex.test(this.sequenceNumber) && +this.sequenceNumber <= 1000;\r\n  \r\n    if (!isValid) {\r\n      console.error('Invalid input. Please enter a positive integer less than or equal to 1000.');\r\n    }\r\n  \r\n    return isValid;\r\n  }\r\n\r\n  getLabSeqValue(): void {\r\n    this.loading = true;\r\n    this.error = null;\r\n\r\n    if (!this.isValidInput()) {\r\n      return;\r\n    }\r\n\r\n    if (this.labSeqSubscription) {\r\n      this.labSeqSubscription.unsubscribe();\r\n    }\r\n\r\n    // Convert the input to a number if it's not an empty string\r\n    const inputNumber = this.sequenceNumber !== '' ? +this.sequenceNumber : 0;\r\n\r\n    this.labSeqSubscription = this.labSeqService\r\n      .getLabSeqValue(inputNumber)\r\n      .subscribe({\r\n        next: (value) => {\r\n          this.labSeqValue = value.toString();\r\n          this.historyResults.push({\r\n            input: this.sequenceNumber?.toString() ?? 'N/A',\r\n            output: this.labSeqValue.toString(),\r\n          });\r\n          this.sequenceNumber = ''; // Set the input to an empty string\r\n          this.loading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error fetching LabSeq value:', error);\r\n          this.error = 'Error fetching LabSeq value. Please try again.';\r\n          this.loading = false;\r\n        },\r\n      });\r\n  }\r\n\r\n  openSwaggerUI(): void {\r\n    const swaggerUrl = 'http://localhost:8080/q/swagger-ui';\r\n    window.open(swaggerUrl, '_blank');\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAQ1BC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IAPjC,KAAAC,cAAc,GAAW,EAAE,CAAC,CAAC;IAC7B,KAAAC,WAAW,GAAW,GAAG,CAAC,CAAC;IAC3B,KAAAC,OAAO,GAAY,KAAK;IACxB,KAAAC,KAAK,GAAkB,IAAI;IAC3B,KAAAC,cAAc,GAAwC,EAAE;IAChD,KAAAC,kBAAkB,GAAwB,IAAI;EAEH;EAEnDC,YAAYA,CAAA;IACV;IACA,MAAMC,oBAAoB,GAAG,YAAY;IAEzC;IACA,MAAMC,OAAO,GAAGD,oBAAoB,CAACE,IAAI,CAAC,IAAI,CAACT,cAAc,CAAC,IAAI,CAAC,IAAI,CAACA,cAAc,IAAI,IAAI;IAE9F,IAAI,CAACQ,OAAO,EAAE;MACZE,OAAO,CAACP,KAAK,CAAC,4EAA4E,CAAC;;IAG7F,OAAOK,OAAO;EAChB;EAEAG,cAAcA,CAAA;IACZ,IAAI,CAACT,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,KAAK,GAAG,IAAI;IAEjB,IAAI,CAAC,IAAI,CAACG,YAAY,EAAE,EAAE;MACxB;;IAGF,IAAI,IAAI,CAACD,kBAAkB,EAAE;MAC3B,IAAI,CAACA,kBAAkB,CAACO,WAAW,EAAE;;IAGvC;IACA,MAAMC,WAAW,GAAG,IAAI,CAACb,cAAc,KAAK,EAAE,GAAG,CAAC,IAAI,CAACA,cAAc,GAAG,CAAC;IAEzE,IAAI,CAACK,kBAAkB,GAAG,IAAI,CAACN,aAAa,CACzCY,cAAc,CAACE,WAAW,CAAC,CAC3BC,SAAS,CAAC;MACTC,IAAI,EAAGC,KAAK,IAAI;QACd,IAAI,CAACf,WAAW,GAAGe,KAAK,CAACC,QAAQ,EAAE;QACnC,IAAI,CAACb,cAAc,CAACc,IAAI,CAAC;UACvBC,KAAK,EAAE,IAAI,CAACnB,cAAc,EAAEiB,QAAQ,EAAE,IAAI,KAAK;UAC/CG,MAAM,EAAE,IAAI,CAACnB,WAAW,CAACgB,QAAQ;SAClC,CAAC;QACF,IAAI,CAACjB,cAAc,GAAG,EAAE,CAAC,CAAC;QAC1B,IAAI,CAACE,OAAO,GAAG,KAAK;MACtB,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACfO,OAAO,CAACP,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD,IAAI,CAACA,KAAK,GAAG,gDAAgD;QAC7D,IAAI,CAACD,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACN;EAEAmB,aAAaA,CAAA;IACX,MAAMC,UAAU,GAAG,oCAAoC;IACvDC,MAAM,CAACC,IAAI,CAACF,UAAU,EAAE,QAAQ,CAAC;EACnC;CACD;AA/DYzB,eAAe,GAAA4B,UAAA,EAL3B7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EACW/B,eAAe,CA+D3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
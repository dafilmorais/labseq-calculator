{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LabSeqService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080/labseq';\n  }\n  getLabSeqValue(n) {\n    const url = `${this.baseUrl}/${n}`;\n    return this.http.get(url, {\n      responseType: 'text'\n    }).pipe(map(data => {\n      const parsedData = parseFloat(data);\n      // Check for \"Infinity\" and handle it as a special case\n      if (data.trim().toLowerCase() === 'infinity') {\n        console.log('Response Body is Infinity');\n        return Number.POSITIVE_INFINITY; // or any other handling you prefer\n      }\n\n      console.log('Response Body:', parsedData);\n      return parsedData;\n    }));\n  }\n  static #_ = this.ɵfac = function LabSeqService_Factory(t) {\n    return new (t || LabSeqService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LabSeqService,\n    factory: LabSeqService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["LabSeqService","constructor","http","baseUrl","getLabSeqValue","n","url","get","responseType","pipe","map","data","parsedData","parseFloat","trim","toLowerCase","console","log","Number","POSITIVE_INFINITY","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\danie\\Desktop\\labseq-calculator\\frontend\\src\\app\\services\\LabSeqService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LabSeqService {\r\n  private baseUrl = 'http://localhost:8080/labseq';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getLabSeqValue(n: number): Observable<number> {\r\n    const url = `${this.baseUrl}/${n}`;\r\n\r\n    return this.http.get<string>(url, { responseType: 'text' as 'json' }).pipe(\r\n      map((data: string) => {\r\n        const parsedData = parseFloat(data);\r\n\r\n        // Check for \"Infinity\" and handle it as a special case\r\n        if (data.trim().toLowerCase() === 'infinity') {\r\n          console.log('Response Body is Infinity');\r\n          return Number.POSITIVE_INFINITY; // or any other handling you prefer\r\n        }\r\n\r\n        console.log('Response Body:', parsedData);\r\n        return parsedData;\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":";;AAOA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,8BAA8B;EAET;EAEvCC,cAAcA,CAACC,CAAS;IACtB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,IAAIE,CAAC,EAAE;IAElC,OAAO,IAAI,CAACH,IAAI,CAACK,GAAG,CAASD,GAAG,EAAE;MAAEE,YAAY,EAAE;IAAgB,CAAE,CAAC,CAACC,IAAI,CACxEC,GAAG,CAAEC,IAAY,IAAI;MACnB,MAAMC,UAAU,GAAGC,UAAU,CAACF,IAAI,CAAC;MAEnC;MACA,IAAIA,IAAI,CAACG,IAAI,EAAE,CAACC,WAAW,EAAE,KAAK,UAAU,EAAE;QAC5CC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACxC,OAAOC,MAAM,CAACC,iBAAiB,CAAC,CAAC;;;MAGnCH,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEL,UAAU,CAAC;MACzC,OAAOA,UAAU;IACnB,CAAC,CAAC,CACH;EACH;EAAC,QAAAQ,CAAA,G;qBAtBUpB,aAAa,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbzB,aAAa;IAAA0B,OAAA,EAAb1B,aAAa,CAAA2B,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
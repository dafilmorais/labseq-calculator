{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/danie/Desktop/labseq-calculator/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LabSeqService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080/labseq';\n  }\n  getLabSeqValue(n) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield _this.http.get(`${_this.baseUrl}/${n.toString()}`).toPromise();\n        if (Number.isFinite(result)) {\n          // Log the response here\n          console.log('LabSeq API Response:', result);\n          return BigInt(result);\n        } else {\n          throw new Error('Value is not a finite number');\n        }\n      } catch (error) {\n        // Handle errors as needed\n        console.error('Error fetching lab sequence value:', error);\n        throw error;\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function LabSeqService_Factory(t) {\n    return new (t || LabSeqService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LabSeqService,\n    factory: LabSeqService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["LabSeqService","constructor","http","baseUrl","getLabSeqValue","n","_this","_asyncToGenerator","result","get","toString","toPromise","Number","isFinite","console","log","BigInt","Error","error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\danie\\Desktop\\labseq-calculator\\frontend\\src\\app\\services\\LabSeqService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LabSeqService {\r\n  private baseUrl = 'http://localhost:8080/labseq';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  async getLabSeqValue(n: BigInt): Promise<BigInt> {\r\n    try {\r\n      const result = await this.http.get<number>(`${this.baseUrl}/${n.toString()}`).toPromise();\r\n\r\n      if (Number.isFinite(result)) {\r\n        // Log the response here\r\n        console.log('LabSeq API Response:', result);\r\n\r\n        return BigInt(result);\r\n      } else {\r\n        throw new Error('Value is not a finite number');\r\n      }\r\n    } catch (error) {\r\n      // Handle errors as needed\r\n      console.error('Error fetching lab sequence value:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;AAMA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,8BAA8B;EAET;EAEjCC,cAAcA,CAACC,CAAS;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC5B,IAAI;QACF,MAAMC,MAAM,SAASF,KAAI,CAACJ,IAAI,CAACO,GAAG,CAAS,GAAGH,KAAI,CAACH,OAAO,IAAIE,CAAC,CAACK,QAAQ,EAAE,EAAE,CAAC,CAACC,SAAS,EAAE;QAEzF,IAAIC,MAAM,CAACC,QAAQ,CAACL,MAAM,CAAC,EAAE;UAC3B;UACAM,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEP,MAAM,CAAC;UAE3C,OAAOQ,MAAM,CAACR,MAAM,CAAC;SACtB,MAAM;UACL,MAAM,IAAIS,KAAK,CAAC,8BAA8B,CAAC;;OAElD,CAAC,OAAOC,KAAK,EAAE;QACd;QACAJ,OAAO,CAACI,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC1D,MAAMA,KAAK;;IACZ;EACH;EAAC,QAAAC,CAAA,G;qBAtBUnB,aAAa,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbxB,aAAa;IAAAyB,OAAA,EAAbzB,aAAa,CAAA0B,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}